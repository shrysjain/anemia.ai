# -*- coding: utf-8 -*-
"""FINGERS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/160lh3bmLSXKc83TCoFLkpfq0j16G_OBj
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)
import tensorflow as tf

import os
from PIL import Image

f = r"/content/drive/MyDrive/Fingernails/train/Anemic"
g = r"/content/drive/MyDrive/Fingernails/train/NonAnemic"
h = r"/content/drive/MyDrive/Fingernails/test/Anemic"
i = r"/content/drive/MyDrive/Fingernails/test/NonAnemic"

"""
for file in os.listdir(f):
    f_img = f+"/"+file
    img = Image.open(f_img)
    img = img.resize((90,90))
    img.save(f_img)

for file in os.listdir(g):
    g_img = g+"/"+file
    img = Image.open(g_img)
    img = img.resize((90,90))
    img.save(g_img)

for file in os.listdir(h):
    h_img = h+"/"+file
    img = Image.open(h_img)
    img = img.resize((90,90))
    img.save(h_img)

for file in os.listdir(i):
    i_img = i+"/"+file
    img = Image.open(i_img)
    img = img.resize((90,90))
    img.save(i_img)
"""

import numpy as np
import pandas as pd
import matplotlib as mpl

import tensorflow as tf
from tensorflow.keras.layers import Input, Lambda, Dense, Flatten, Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.applications.resnet50 import ResNet50
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img
from tensorflow.keras.models import Sequential
from glob import glob

IMAGE_SIZE = [90, 90]

train_path = "/content/drive/MyDrive/FINAL/TRAIN"
valid_path = "/content/drive/MyDrive/FINAL/TEST"

inception = InceptionV3(input_shape = IMAGE_SIZE + [3], weights = 'imagenet', include_top = False)

for layer in inception.layers:
  layer.trainable = False

folders = glob("/content/drive/MyDrive/FINAL/TRAIN/*")

x = Flatten()(inception.output)

prediction = Dense(2, activation = 'sigmoid')(x)

model = Model(inputs=inception.input, outputs=prediction)

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = tf.keras.optimizers.legacy.Adam(),
    metrics=['accuracy']
)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale=1./255)

training_set = train_datagen.flow_from_directory(
  directory='/content/drive/MyDrive/Fingernails/train',
  target_size = (90, 90),
  color_mode="rgb",
  batch_size = 32,
  class_mode = 'categorical',
  subset="training"
)

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Fingernails/test',
  target_size = (90, 90),
  batch_size = 32,
  color_mode = 'rgb',
  class_mode = 'categorical',
)

r = model.fit(
  x=training_set,
  validation_data=test_set,
  epochs=8,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set),
  verbose=1
)